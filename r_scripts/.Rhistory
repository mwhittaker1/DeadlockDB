cd ..
data <- read.xlsx("test_account_data.xlsx")
install.packages("readx1")
data <- read.csv("test_account_data.csv")
plot(data$account_id, data$hero_id)
data <- read.csv("matchcsv.csv")
library(dplyr)
install.packages("dplyr")
library(dplyr)
summary <- data %>%
group_by(region_mode_parsed) %>%
count(match_id)
library(dplyr)
summary <- data %>%
group_by(y) %>%
count(x)
library(dplyr)
summary <- data %>%
group_by(region_mode_parsed) %>%
count(match_id)
library(dplyr)
summary <- data %>%
group_by(region_mode_parsed) %>%
count(match_id)
install.packages(ggplot2)
library(ggplot2)
install.packages(ggplot2)
install.packages("ggplot2", repos = "https://cloud.r-project.org")
library(ggplot2)
ggplot(summary, aes(region_mode_parsed = match_id, match_id = n, fill = region_mode_parsed)) +
geom_bar(stat = "identity", position = "dodge")
library(dplyr)
summary <- data %>%
group_by(region_mode_parsed) %>%
count(match_id)
library(ggplot2)
ggplot(summary, aes(region_mode_parsed = match_id, match_id = n, fill = region_mode_parsed)) +
geom_bar(stat = "identity", position = "dodge")
.R.version$arch
View(data)
library(dplyr)
summary <- data %>%
group_by(region_mode_parsed) %>%
count(match_id)
library(ggplot2)
ggplot(summary, aes(match_id = region_mode_parsed, region_mode_parsed = n, fill = match_id)) +
geom_bar(stat = "identity", position = "dodge")
library(ggplot2)
ggplot(summary, aes(x = y, y = n, fill = x)) +
geom_bar(stat = "identity", position = "dodge")
library(dplyr)
summary <- data %>%
group_by(region_mode_parsed) %>%
summarise(count = n_distinct(match_id))
library(ggplot2)
ggplot(summary, aes(x = region_mode_parsed, y = count)) +
geom_bar(stat = "identity") +
labs(x = "Region/Mode", y = "Match Count", title = "Matches by Region/Mode") +
theme_minimal()
data <- read.csv("test_hero_match_dta.csv")
data <- read.csv("test_hero_match_data.csv")
data <- read.csv("test_hero_match_data.csv")
data[1:10]
data[1:10, ]
subset(data, column_name == "player_damage_taken")
subset(data, column_name == "total_shots_missed")
subset(data, column_name == "win_percentage")
subset(data, win_percentage > 50)
subset(data[1:10, ], win_percentage > 50)
data[order(data$win_percentage), ]
library(dplyr)
top5 <- data %>%
arrange(desc(win_percentage))%>%
slice_head(n=5)
library(dplyr)
top5 <- data %>%
arrange(desc(win_percentage))%>%
slice_head(n=5)
> top5 <- head(data[order(-data$win_percentage, ], 5)
> top5 <- head(data[order(-data$win_percentage, ], 5)
ls()
top5
x <= hero_pickrate
cor(hero_pickrate, win_percentage, method = "pearson"
cor(hero_pickrate, win_percentage, method = "pearson")
cor(hero_pickrate, win_percentage, method = "pearson")
cor(hero_pickrate, win_percentage, method = "pearson")
cor(data$hero_pickrate, data$win_percentage, method = "pearson")
data$total_denies
data$denies_by_match <- df$denies / df$matches
data$denies_by_match <- df$total_denies / df$matches
data$denies_by_match <- data$total_denies / data$matches
cor(data$denies_by_match, data$win_percentage, method = "pearson")
cor.test(data$hero_pickrate, data$win_percentage)
results <- sapply(
data[ , sapply(data, is.numeric)],
function(col) {
test <- cor.test(col, data$win_percentage, use = "complete.obs")
c(cor = test$estimate, p = test$p.value)
}
)
# Transpose and turn into data frame
results_df <- as.data.frame(t(results))
results_df <- results_df[rownames(results_df) != "win_percentage", ]  # remove self-correlation
# Sort by p-value and return top 5
top5 <- results_df[order(results_df$p), ][1:5, ]
top5
